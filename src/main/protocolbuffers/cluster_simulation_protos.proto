/**
 * Copyright (c) 2013, Regents of the University of California
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.  Redistributions in binary
 * form must reproduce the above copyright notice, this list of conditions and the
 * following disclaimer in the documentation and/or other materials provided with
 * the distribution.  Neither the name of the University of California, Berkeley
 * nor the names of its contributors may be used to endorse or promote products
 * derived from this software without specific prior written permission.  THIS
 * SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package ClusterSchedulingSimulation;

message ExperimentResultSet {
  repeated ExperimentEnv experiment_env = 1;

  // There is a 1-1 relationship between an ExperimentEnv and a WorkloadDesc.
  message ExperimentEnv {
    optional string cell_name = 1;
    optional string workload_split_type = 2;
    optional double run_time = 3;
    repeated ExperimentResult experiment_result = 4;
    optional bool is_prefilled = 5 [default = false];
    repeated CommonWorkloadStats common_workload_stats = 6;
    // Next field number: 7

    message CommonWorkloadStats {
      optional string workload_name = 1;
      repeated JobStats job_stats = 2;
      // Job-level stats.
      message JobStats {
        optional int64 id = 1;
        optional int32 num_tasks = 2;
        optional double mem_per_task = 3;
        optional double cpu_per_task = 4;
        optional double task_duration = 5;
      }
    }


    message ExperimentResult {
      // Track avg resource utilization attributable to tasks actually running.
      optional double cell_state_avg_cpu_utilization = 1;
      optional double cell_state_avg_mem_utilization = 2;
      // Track avg resource utilization attributable to pessimistic locking
      // while schedulers make their scheduling decisions.
      optional double cell_state_avg_cpu_locked = 3;
      optional double cell_state_avg_mem_locked = 4;
      // Track per-workload level stats for this experiment.
      repeated WorkloadStats workload_stats = 5;
      // Workload specific experiment parameters.
      optional string sweep_workload = 6;
      optional double avg_job_interarrival_time = 7;
      // Track per-scheduler level stats for this experiment.
      repeated SchedulerStats scheduler_stats = 8;
      // Scheduler specific experiment parameters.
      repeated SchedulerWorkload sweep_scheduler_workload = 9;
      optional double constant_think_time = 10;
      optional double per_task_think_time = 11;
      // Next field number: 12

      // Workload-level stats.
      message WorkloadStats {
        optional string workload_name = 1;
        optional int64 num_jobs = 2;
        optional int64 num_jobs_scheduled = 3;
        optional int64 num_jobs_fully_scheduled = 4;
        optional int64 num_jobs_timed_out_scheduling = 5;
        optional double job_think_times_90_percentile = 6;
        optional double avg_job_queue_times_till_first_scheduled = 7;
        optional double avg_job_queue_times_till_fully_scheduled = 8;
        optional double job_queue_time_till_first_scheduled_90_percentile = 9;
        optional double job_queue_time_till_fully_scheduled_90_percentile = 10;
        optional double num_scheduling_attempts_90_percentile = 11;
        optional double num_scheduling_attempts_99_percentile = 12;
        optional double num_task_scheduling_attempts_90_percentile = 13;
        optional double num_task_scheduling_attempts_99_percentile = 14;
        optional double avg_job_execution_time = 15;
        optional double avg_job_completion_time = 16;
      }

      message SchedulerStats {
        optional string scheduler_name = 1;
        optional double useful_busy_time = 2;
        optional double wasted_busy_time = 3;
        repeated PerDayStats per_day_stats = 4;
        repeated PerWorkloadBusyTime per_workload_busy_time = 5;
        // These are job level transactions
        // TODO(andyk): rename these to include "job" in the name.
        optional int64 num_successful_transactions = 6;
        optional int64 num_failed_transactions = 7;
        optional int64 num_no_resources_found_scheduling_attempts = 8;
        optional int64 num_retried_transactions = 9;
        optional int64 num_jobs_timed_out_scheduling = 10;
        optional int64 num_successful_task_transactions = 11;
        optional int64 num_failed_task_transactions = 12;
        optional bool is_multi_path = 13;
        // Num jobs in schedulers job queue when simulation ended.
        optional int64 num_jobs_left_in_queue = 14;
        optional int64 failed_find_victim_attempts = 15;
        // Next field ID:16

        // Per-day bucketing of important stats to support error bars.
        message PerDayStats {
          optional int64 day_num = 1;
          optional double useful_busy_time = 2;
          optional double wasted_busy_time = 3;
          optional int64 num_successful_transactions = 4;
          optional int64 num_failed_transactions = 5;
        }


        // Track busy time per scheduler, per workload.
        message PerWorkloadBusyTime {
          optional string workload_name = 1;
          optional double useful_busy_time = 2;
          optional double wasted_busy_time = 3;
        }
      }

      // (scheduler, workload) pairs, used to keep track of which
      // such pairs the parameter sweep is applied to in an experiment run.
      message SchedulerWorkload {
        optional string schedulerName = 1;
        optional string workloadName = 2;
      }
    }
  }
}

